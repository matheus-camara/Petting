# Please refer https://aka.ms/HTTPSinContainer on how to setup an https developer certificate for your ASP .NET Core service.

version: '3.4'
services:
  # admin_api:
  #   image: admin_api
  #   container_name: admin_api
  #   build:
  #     context: ./backend/Petting.Admin
  #     dockerfile: Dockerfile
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ASPNETCORE_URLS=http://+:80
  #     - ASPNETCORE_Kestrel__Certificates__Default__Password=mypass123
  #     - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/Admin.Api.pfx
  #     - rabbitmq_url=rabbitmq
  #     - rabbitmq_user=admin
  #     - rabbitmq_password=admin
  #   volumes:
  #     - ~/.aspnet/https:/https:ro
  #   ports:
  #     - '5001:80'
  #   depends_on:
  #     - keycloak
  #     - rabbitmq
  #   networks:
  #     - app
  #     - gateway
    
  customer_api:
    image: customer_api
    container_name: customer_api
    build:
      context: ./backend/Customer
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__Main=Server=customer_db;Database=master;User Id=sa;Password=CustomerApi@500
      - ASPNETCORE_Kestrel__Certificates__Default__Password=mypass123
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/Customers.Api.pfx
    volumes:
      - ~/.aspnet/https:/https:ro
    ports:
      - '5002:80'
    networks:
      - app
      - gateway
      - customer_net
    depends_on:
      - customer_db

  gateway:
    image: ocelot
    container_name: ocelot
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
    ports:
      - '5000:80'
    networks:
      - gateway

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
     - RABBITMQ_ERLANG_COOKIE=Petting.Queues
     - RABBITMQ_DEFAULT_USER=admin
     - RABBITMQ_DEFAULT_PASS=admin
    networks:
      - app

  keycloak:
    image: docker.io/bitnami/keycloak:16
    depends_on:
      - postgresql
    ports:
      - "8080:8080"
    networks:
      - keycloak_net
      - app

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo-local.yaml:/etc/tempo.yaml
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268:14268"  # jaeger ingest
      - "3200:3200"   # tempo
      - "4317:4317"  # otlp grpc
      - "4318:4318"  # otlp http
      - "9411:9411"   # zipkin

  synthetic-load-generator:
    image: omnition/synthetic-load-generator:1.0.25
    volumes:
      - ./load-generator.json:/etc/load-generator.json
    environment:
      - TOPOLOGY_FILE=/etc/load-generator.json
      - JAEGER_COLLECTOR_URL=http://tempo:14268
    depends_on:
      - tempo

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:8.1.6
    volumes:
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"

  postgresql:
    image: docker.io/bitnami/postgresql:11
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_USERNAME=bn_keycloak
      - POSTGRESQL_DATABASE=bitnami_keycloak
    networks:
      - keycloak_net
    volumes:
      - 'postgresql_data:/bitnami/postgresql'

  customer_db:
    image: mcr.microsoft.com/mssql/server
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "CustomerApi@500"
      MSSQL_PID: Express
    ports:
      - "1433:1433"
    volumes:
      - 'db_volume:/mssql'
    networks:
      - customer_net

volumes:
  db_volume:
    driver: local
  postgresql_data:
    driver: local

networks:
  app:
    driver: bridge
  customer_net:
    driver: bridge
  gateway:
    driver: bridge
  keycloak_net:
    driver: bridge